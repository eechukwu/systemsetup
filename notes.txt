
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code (equivalent to TeamCity VCS checkout)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker container to ensure Linux platform (as required by TeamCity)
      - name: Set up Docker container for PowerShell on Linux
        uses: docker://mcr.microsoft.com/powershell:latest

      # Step 3: Run the patch.ps1 script with -semVer argument (from .ci directory)
      - name: Run patch.ps1 Script
        run: |
          pwsh -File .ci/patch.ps1 -semVer ${{ github.run_number }}

      # Step 4: Execute inline PowerShell code (replicating TeamCity's inline PowerShell)
      - name: Execute Inline PowerShell Script
        shell: pwsh
        run: |
          $patchPath = '/dtl/stitcher/dist/microapps'
          $patchFiles = Get-ChildItem . -Include @('*.html', '*.js', '*.css') -Recurse
          
          Write-Host "Patching web file(s)..."
          
          foreach ($file in $patchFiles) {
              $relativePath  = Resolve-Path -relative $file.Directory
              $appName  = ($relativePath -split '\\')[1]
              
              Write-Host "    FileName: " $file.FullName
              Write-Host "    AppName : " $appName
              
              (Get-Content $file.PSPath) |
              ForEach-Object { 
                $_ -replace -join('href="', $appName, "/"), -join('href=\"', $patchPath, "/", $appName, "/") `
                  -replace -join('src="', $appName, "/"), -join('src=\"', $patchPath, "/", $appName, "/") 
              } | Set-Content $file.PSPath
          }
          
          Write-Host "Patching nuspec file(s)..."
          
          $patchNuspecFiles = Get-ChildItem . -Include @('*.nuspec') -Recurse
          foreach ($file in $patchNuspecFiles) {
              Write-Host "    FileName: " $file.FullName
              
              (Get-Content $file.PSPath) |
              ForEach-Object { 
                $_ -replace '<patchPath>', $patchPath
              } | Set-Content $file.PSPath

      # Step 5: Build the NuGet package (equivalent to TeamCity NuGet pack)
      - name: Build and Pack NuGet package
        run: |
          version=1.1.${{ github.run_number }}
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            version="${version}-${{ github.ref_name }}"
          fi
          nuget pack ./msm.com.micro.apps.nuspec -version $version

      # Step 6: Publish NuGet package using Artifactory script (equivalent to TeamCity push)
      - name: Publish NuGet package
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          pwsh -Command ". .\ci\Artifactory-Management.ps1; PackagesFeed-Nuget-PackAndPush 'true' '${{ github.ref }}' '.\msm.com.micro.apps.nuspec' 'msm.com.micro.apps'"

      # Step 7: Publish NuGet package (equivalent to TeamCity push with PowerShell)
      - name: Publish NuGet package with PowerShell
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          pwsh -Command ". .\ci\Artifactory-Management.ps1; PackagesFeed-Nuget-Push 'true' '${{ github.ref }}' 'msm.com.micro.apps' '.'"

      # Step 8: Download Artifacts (optional, if needed from previous runs)
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ci.zip
          path: ./ci
